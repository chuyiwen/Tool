#pragma once

const INT X_DATATIME_LEN = 19;
//------------------------------------------------------------------------------------
// DWORD表示的时间,年月日小时分秒,如果把它直接转为DWORD，可以直接比较大小,但差值无意义
// 值较大者其时间也较后
//------------------------------------------------------------------------------------
struct tagDWORDTime
{
	DWORD	sec		: 6,	// 0 - 59
			min		: 6,	// 0 - 59
			hour    : 5,	// 0 - 23
			day		: 5,	// 1 - 31
			month	: 4,	// 1 - 12
			year	: 6;	// 两位数，比如:05, 表示2005.最大表示到2063年

	VOID Clear()
	{
		sec=min=hour=day=month=year=0;
	}

	//--------------------------------------------------------------------------------
	// operator =
	//--------------------------------------------------------------------------------
	tagDWORDTime& operator = (const tagDWORDTime& time)
	{ 
		sec=time.sec;
		min=time.min; 
		hour=time.hour;
		day=time.day;
		month=time.month;
		year=time.year;
		return *this;
	}

	//--------------------------------------------------------------------------------
	// operator =
	//--------------------------------------------------------------------------------
	tagDWORDTime& operator = (DWORD dw_time)
	{
		return (*this = *(tagDWORDTime*)&dw_time);
	}

	//--------------------------------------------------------------------------------
	// convertor
	//--------------------------------------------------------------------------------
	operator DWORD()
	{
		return *(DWORD*)this;
	}

	//--------------------------------------------------------------------------------
	// constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime()
	{
	};

	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(BYTE bySec,BYTE byMin,BYTE byHour,BYTE byDay,BYTE byMonth,BYTE byYear)
	{
		sec = bySec;
		min = byMin;
		hour = byHour;
		day = byDay;
		month = byMonth;
		year = byYear;
	}

	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(const tagDWORDTime& time)
	{
		*this = time;
	}

	//--------------------------------------------------------------------------------
	// copy constructor
	//--------------------------------------------------------------------------------
	tagDWORDTime(DWORD& dw_time)
	{
		*this = dw_time;
	}
};

//-------------------------------------------------------------------------------------
// 得到当前系统时间
//-------------------------------------------------------------------------------------
tagDWORDTime GetCurrentDWORDTime();
//-------------------------------------------------------------------------------------
// 是否是闰年
//-------------------------------------------------------------------------------------
BOOL IsLeapYear(WORD iYear);
//-------------------------------------------------------------------------------------
// 计算两个时间差
//-------------------------------------------------------------------------------------
DWORD CalcTimeDiff(tagDWORDTime destTime, tagDWORDTime srcTime);
//-------------------------------------------------------------------------------------
// 让某个时间加上某个值
//-------------------------------------------------------------------------------------
tagDWORDTime IncreaseTime(tagDWORDTime srcTime, INT nIncrementSecond);
//-----------------------------------------------------------------------------
// 时间上递减指定秒数
//-----------------------------------------------------------------------------
tagDWORDTime DecreaseTime(tagDWORDTime srcTime, INT nDecrementSecond);
//-------------------------------------------------------------------------------------
// 判断某个时间是星期几
//-------------------------------------------------------------------------------------
DWORD WhichWeekday(tagDWORDTime dw_time);
//-------------------------------------------------------------------------------------
// 转化成: 年-月-日 时:分:秒 如：2008-9-12 19:19:19
//-------------------------------------------------------------------------------------
BOOL DwordTime2DataTime(OUT CHAR szTime[], INT nSzArray, const tagDWORDTime &dw_time);
//-------------------------------------------------------------------------------------
// 将 年-月-日 时:分:秒 格式的数据转换为tagDWORDTime
//-------------------------------------------------------------------------------------
BOOL DataTime2DwordTime(OUT tagDWORDTime &dw_time, const CHAR szTime[], INT nSzArray);